def not (a: bool) : bool :=
    if a then false else true

def and (a: bool) (b: bool) : bool :=
    if a then b else false

def or (a: bool) (b: bool) : bool :=
    if a then true else b

def id : bool -> bool :=
    fun (x: bool) => x

def applytwice (f: bool -> bool) (b: bool) : bool :=
    f (f b)

def f1 (a: bool) (b: bool) (c: bool) : bool :=
    let ab := (and a) b in
    (or c) ab

def f2 (a: bool) : bool :=
    ((f1 a) (not a)) (not (not a))