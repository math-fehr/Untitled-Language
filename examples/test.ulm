enum bool2 :=
| true2
| false2

def not (a: bool) : bool :=
    if a then false else true

def and (a: bool) (b: bool) : bool :=
    if a then b else false

def or (a: bool) (b: bool) : bool :=
    if a then true else b

def xor (a: bool) (b: bool) : bool :=
    and (or a b) (not (and a b))

def id : bool -> bool :=
    fun (x: bool) => x

def applytwice (f: bool -> bool) (b: bool) : bool :=
    f (f b)

def aborc (a: bool) (b: bool) (c: bool) : bool :=
    let ab := and a b in
    or c ab

def alwaystrue (a: bool) : bool :=
    (aborc (id a) (not (applytwice id a))) (not (not a))